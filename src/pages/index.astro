---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import HomeComponent from "@/components/HomeComponent.astro";
import { Separator } from "@/components/ui/separator";
import { ModeToggle } from "@/components/ModeToggle";

import lights4 from "@/assets/lights-4.svg?raw";
import lights2 from "@/assets/lights-2.svg?raw";
import lights10 from "@/assets/lights-10.svg?raw";
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };

  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });

    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
  }
</script>

<Layout>
  <main class="dark:bg-black bg-white text-black dark:text-[#d3d3d3] w-full" id="hover-div">
    <div class="absolute left-0 top-0 z-10 h-screen w-full hidden lg:block overflow-hidden">
      <div
        class="lights absolute -inset-2 -translate-x-20 dark:hidden"
        style={{
          display: "none",
        }}
      >
        <Fragment set:html={lights2} />
      </div>
      <div
        class="lights absolute -inset-2 left-0 translate-x-1/2 w-full dark:hidden"
        style={{
          display: "none",
        }}
      >
        <Fragment set:html={lights10} />
      </div>
      <div
        class="lights absolute -translate-y-2 translate-x-2 right-0 dark:hidden"
        style={{
          display: "none",
        }}
      >
        <Fragment set:html={lights4} />
      </div>
    </div>

    <div class="absolute top-0 right-0 z-50 p-2">
      <ModeToggle client:only />
    </div>

    <div
      class="h-max items-center justify-center font-custom2 md:flex-col lg:mx-16 lg:flex lg:flex-row xl:mx-40 2xl:mx-80"
    >
      <nav class="block h-fit w-full p-8 lg:w-1/5 2xl:w-2/5">
        <ul
          class="flex select-none justify-center gap-x-8 text-xl tracking-tight sm:gap-x-16 sm:text-2xl lg:flex-col lg:items-end lg:text-3xl"
        >
          <li class="z-50 cursor-pointer">
            <a href="/">Home</a>
          </li>
          <li class="line-through">
            <a href="/about">About</a>
          </li>
          <li class="line-through">
            <a href="/notes">Notes</a>
          </li>
          <li class="line-through">
            <a href="/projects">Projects</a>
          </li>
        </ul>
      </nav>

      <div class="hidden h-dvh lg:flex lg:items-center *:opacity-15 *:bg-black *:dark:bg-white">
        <Separator orientation="vertical" className="h-1/3" />
      </div>

      <main class="flex z-50 h-max w-full items-center justify-center p-6 font-custom2 text-xl lg:h-dvh lg:w-4/5">
        <HomeComponent />
      </main>
    </div>

    <div class="absolute left-0 top-0 h-screen w-full z-10">
      <div class="relative h-screen w-full">
        <div
          class="absolute left-0 top-0 h-screen w-full"
          id="mask-div"
          style={{
            backgroundSize: "3vmin 3vmin",
            maskMode: "alpha",
            maskImage: `url(radialmask.svg)`,
            maskPosition: "50% 50%",
            maskRepeat: "no-repeat",
            maskSize: "100vh 100vh",
            transition: "opacity 0.2s ease-in-out",
            opacity: 0,
          }}
        >
        </div>
        <div
          class="absolute left-0 top-0 h-screen w-full"
          id="grid-pattern"
          style={{
            backgroundSize: "3vmin 3vmin",
          }}
        >
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Check for christmas season
  if (new Date().getMonth() + 1 == 12) {
    document.querySelectorAll(".lights").forEach((light) => {
      (light as HTMLElement).style.display = "flex !important";
    });
  }

  // Check for reduced motion
  let isReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches ? true : false;

  // Animated grid pattern
  const hoverDiv = document.getElementById("hover-div");
  const maskDiv = document.getElementById("mask-div");
  const gridPattern = document.getElementById("grid-pattern");
  if (maskDiv) maskDiv.style.opacity = "0";

  // Check for changes in the theme
  const checkForGrid = (gridPattern: HTMLElement, maskDiv: HTMLElement) => {
    const getThemePreference = () => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }

      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    };
    const isDark = getThemePreference() === "dark";

    if (!isDark) {
      gridPattern.style.backgroundImage = "radial-gradient(rgba(255, 255, 255, 0.05) 4%, transparent 4%)";
      maskDiv.style.backgroundImage = "radial-gradient(rgba(255, 255, 255, 0.7) 4%, transparent 4%)";
    } else {
      gridPattern.style.backgroundImage = "radial-gradient(rgba(0, 0, 0, 0.1) 4%, transparent 4%)";
      maskDiv.style.backgroundImage = "radial-gradient(rgba(0, 0, 0, 0.8) 4%, transparent 4%)";
    }
  }

  // Event listener for the theme changes
  window.addEventListener("storage", () => {
    if (!gridPattern || !maskDiv) return;

    checkForGrid(gridPattern, maskDiv);
  });

  // Initial check for theme
  if (gridPattern && maskDiv) checkForGrid(gridPattern, maskDiv);

  if (!isReducedMotion && maskDiv) {
    hoverDiv?.addEventListener("mousemove", (event) => {
      setTimeout(() => {
        maskDiv.style.maskPosition = `${event.clientX - maskDiv.clientHeight / 2}px ${event.clientY - maskDiv.clientHeight / 2}px`;
      }, 100);
    });
  }

  if (!isReducedMotion && maskDiv) {
    hoverDiv?.addEventListener("mouseover", () => {
      hoverDiv.addEventListener("mousemove", () => {
        maskDiv.style.opacity = "0.2";
        hoverDiv.removeEventListener("mousemove", () => {});
      });
    });
  }

  if (!isReducedMotion && maskDiv) {
    hoverDiv?.addEventListener("mouseleave", () => (maskDiv.style.opacity = "0"));
  }
</script>

<script>
  interface Particle {
    id: number;
    x: number;
    y: number;
    size: number;
    opacity: number;
    lifetime: number;
    speed: number;
    sway: number;
    appearDate: number;
  }

  const mainDiv = document.querySelector("main")
  const canvasElement = document.createElement("canvas");
  canvasElement.height = window.innerHeight;
  canvasElement.width = window.innerWidth;
  canvasElement.style.position = "absolute";
  canvasElement.style.top = "0";
  canvasElement.style.left = "0";
  canvasElement.style.pointerEvents = "none";
  canvasElement.style.opacity = "0.3";
  canvasElement.id = "snowflakes-canvas";
  mainDiv?.appendChild(canvasElement)

  const context = (canvasElement as HTMLCanvasElement).getContext("2d");
  if (!context) throw new Error("Canvas-related issue found");

  let canvasWidth = context.canvas.width;
  let canvasHeight = context.canvas.height;
  const canvasColor = "transparent";
  const particlesColor = "#FFFFFF"; // Hex color value
  const timeBetweenParticles = 1;
  let numberOfTotalParticlesLogged = 0;
  let currentTimeBetween = 0;
  let particles: Particle[] = [];

  window.addEventListener("resize", () => {
    const canvasElement = document.getElementById("snowflakes-canvas");
    if (!canvasElement) return;
    
    (canvasElement as HTMLCanvasElement).height = window.innerHeight;
    (canvasElement as HTMLCanvasElement).width = window.innerWidth;

    canvasWidth = window.innerHeight;
    canvasHeight = window.innerWidth;
  })

  const hexToRGB = (hexColor: string) => {
    const hexList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "A", "B", "C", "D", "E", "F"];
    hexColor = hexColor.toUpperCase();
    let hexColours;

    if (hexColor.length == 4) {
      hexColours = {
        red: hexColor.slice(1, 1),
        green: hexColor.slice(2, 2),
        blue: hexColor.slice(3, 3),
      };
    } else if (hexColor.length == 7) {
      hexColours = {
        red: hexColor.slice(1, 3),
        green: hexColor.slice(3, 5),
        blue: hexColor.slice(5, 7),
      };
    } else {
      throw new Error("Wrong hex value!");
    }

    return {
      red: hexList.indexOf(hexColours.red.slice(1)) * 16 + hexList.indexOf(hexColours.red.slice(-1)),
      green: hexList.indexOf(hexColours.green.slice(1)) * 16 + hexList.indexOf(hexColours.green.slice(-1)),
      blue: hexList.indexOf(hexColours.blue.slice(1)) * 16 + hexList.indexOf(hexColours.blue.slice(-1)),
    };
  };

  const generateNewParticle = () => {
    const coinToss = Math.random();
    numberOfTotalParticlesLogged += 1; // Increase the total particles (using it as the id)

    particles.push({
      id: numberOfTotalParticlesLogged,
      x: canvasWidth * Math.random(),
      y: coinToss < 0.5 ? canvasHeight * Math.random() : 0,
      size: 2 * Math.random() + 0.01,
      opacity: 0,
      lifetime: 5000 * Math.random() + 1000,
      speed: 0.9 * Math.random() + 0.1,
      sway: 0.5 * Math.random() + 0,
      appearDate: Date.now(),
    });
  };

  const updateLoop = () => {
    // Check if a new particle should be made
    if (currentTimeBetween < timeBetweenParticles) {
      currentTimeBetween += 1;
    } else {
      currentTimeBetween = 0;
      generateNewParticle();
    }

    if (!particles.length) return;
    const currentDate = Date.now();

    const isOutOfBounds = (particle: Particle) =>
      particle.x + particle.sway < 0 ||
      particle.y + particle.sway < 0 ||
      particle.x + particle.sway > canvasWidth ||
      particle.y + particle.speed > canvasHeight;

    particles = particles.filter((particle) => {
      if (particle.appearDate + particle.lifetime - currentDate > 300 && particle.opacity < 1) {
        particle.opacity += 0.005;
      } else {
        particle.opacity -= 0.005;
      }

      // Change new particle position
      particle.x += particle.sway;
      particle.y += particle.speed;

      return particle.opacity > 0 && !isOutOfBounds(particle);
    });
  };

  const drawLoop = () => {
    if (canvasColor == "transparent") {
      context.clearRect(0, 0, canvasWidth, canvasHeight);
    } else {
      context.fillStyle = canvasColor;
      context.fillRect(0, 0, canvasWidth, canvasHeight);
    }

    particles.forEach((particle) => {
      const { red, green, blue } = hexToRGB(particlesColor);

      context.fillStyle = `rgba(${red}, ${green}, ${blue}, ${particle.opacity})`;
      context.beginPath();
      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2, true);
      context.fill();
    });
  };

  const animationLoop = () => {
    updateLoop();
    drawLoop();
    requestAnimationFrame(animationLoop);
  };

  window.requestAnimationFrame(animationLoop);
</script>
